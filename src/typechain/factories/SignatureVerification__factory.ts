/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SignatureVerification,
  SignatureVerificationInterface,
} from "../SignatureVerification";

const _abi = [
  {
    inputs: [],
    name: "BadContractSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "BadSignatureV",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSigner",
    type: "error",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212200ce75051096c96bf7c73f22c04ce84aff5cba4334576a4406cfbf0c1b8fd524464736f6c634300080d0033";

type SignatureVerificationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SignatureVerificationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SignatureVerification__factory extends ContractFactory {
  constructor(...args: SignatureVerificationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SignatureVerification";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SignatureVerification> {
    return super.deploy(overrides || {}) as Promise<SignatureVerification>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SignatureVerification {
    return super.attach(address) as SignatureVerification;
  }
  connect(signer: Signer): SignatureVerification__factory {
    return super.connect(signer) as SignatureVerification__factory;
  }
  static readonly contractName: "SignatureVerification";
  public readonly contractName: "SignatureVerification";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SignatureVerificationInterface {
    return new utils.Interface(_abi) as SignatureVerificationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignatureVerification {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SignatureVerification;
  }
}
