/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ZoneInteraction,
  ZoneInteractionInterface,
} from "../ZoneInteraction";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "InvalidRestrictedOrder",
    type: "error",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220144062755f1359957baa88cbff258bf733c4149f6a85e8bddeb43130baabf30664736f6c634300080d0033";

type ZoneInteractionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZoneInteractionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZoneInteraction__factory extends ContractFactory {
  constructor(...args: ZoneInteractionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ZoneInteraction";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ZoneInteraction> {
    return super.deploy(overrides || {}) as Promise<ZoneInteraction>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ZoneInteraction {
    return super.attach(address) as ZoneInteraction;
  }
  connect(signer: Signer): ZoneInteraction__factory {
    return super.connect(signer) as ZoneInteraction__factory;
  }
  static readonly contractName: "ZoneInteraction";
  public readonly contractName: "ZoneInteraction";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZoneInteractionInterface {
    return new utils.Interface(_abi) as ZoneInteractionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ZoneInteraction {
    return new Contract(address, _abi, signerOrProvider) as ZoneInteraction;
  }
}
