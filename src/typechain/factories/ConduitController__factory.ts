/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ConduitController,
  ConduitControllerInterface,
} from "../ConduitController";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
    ],
    name: "CallerIsNotNewPotentialOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
    ],
    name: "CallerIsNotOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
    ],
    name: "ChannelOutOfRange",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
    ],
    name: "ConduitAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidCreator",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitialOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
      {
        internalType: "address",
        name: "newPotentialOwner",
        type: "address",
      },
    ],
    name: "NewPotentialOwnerAlreadySet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
    ],
    name: "NewPotentialOwnerIsZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NoConduit",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
    ],
    name: "NoPotentialOwnerCurrentlySet",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "conduit",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "conduitKey",
        type: "bytes32",
      },
    ],
    name: "NewConduit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "conduit",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newPotentialOwner",
        type: "address",
      },
    ],
    name: "PotentialOwnerUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
    ],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
    ],
    name: "cancelOwnershipTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "conduitKey",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "initialOwner",
        type: "address",
      },
    ],
    name: "createConduit",
    outputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "channelIndex",
        type: "uint256",
      },
    ],
    name: "getChannel",
    outputs: [
      {
        internalType: "address",
        name: "channel",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
      {
        internalType: "address",
        name: "channel",
        type: "address",
      },
    ],
    name: "getChannelStatus",
    outputs: [
      {
        internalType: "bool",
        name: "isOpen",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
    ],
    name: "getChannels",
    outputs: [
      {
        internalType: "address[]",
        name: "channels",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "conduitKey",
        type: "bytes32",
      },
    ],
    name: "getConduit",
    outputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
      {
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getConduitCodeHashes",
    outputs: [
      {
        internalType: "bytes32",
        name: "creationCodeHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "runtimeCodeHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
    ],
    name: "getKey",
    outputs: [
      {
        internalType: "bytes32",
        name: "conduitKey",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
    ],
    name: "getPotentialOwner",
    outputs: [
      {
        internalType: "address",
        name: "potentialOwner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
    ],
    name: "getTotalChannels",
    outputs: [
      {
        internalType: "uint256",
        name: "totalChannels",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
      {
        internalType: "address",
        name: "newPotentialOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "conduit",
        type: "address",
      },
      {
        internalType: "address",
        name: "channel",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isOpen",
        type: "bool",
      },
    ],
    name: "updateChannel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161002060208201610088565b6020820181038252601f19601f82011660405250805190602001206080818152505060008060001b60405161005490610088565b8190604051809103906000f5905080158015610074573d6000803e3d6000fd5b506001600160a01b03163f60a05250610095565b610b1180611a7883390190565b60805160a0516119a26100d660003960008181610148015281816108410152610911015260008181610125015281816107e901526108cc01526119a26000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636d4354211161008c5780637b37e561116100665780637b37e561146102495780638b9e028b1461025c578063906c87cc1461027c57806393790f441461028f57600080fd5b80636d435421146101f15780636e9bfd9f14610204578063794593bc1461023657600080fd5b806314afd79e116100c857806314afd79e1461018757806333bc85721461019a5780634e3f9580146101bd57806351710e45146101de57600080fd5b8063027cc764146100ef5780630a96ad391461011f57806313ad9cab14610172575b600080fd5b6101026100fd366004610c7d565b6102a2565b6040516001600160a01b0390911681526020015b60405180910390f35b604080517f000000000000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000602082015201610116565b610185610180366004610ca7565b610343565b005b610102610195366004610cf3565b610553565b6101ad6101a8366004610d15565b610580565b6040519015158152602001610116565b6101d06101cb366004610cf3565b6105bb565b604051908152602001610116565b6101856101ec366004610cf3565b6105e5565b6101856101ff366004610d15565b6106ea565b610217610212366004610d48565b6107dd565b604080516001600160a01b039093168352901515602083015201610116565b610102610244366004610d61565b610868565b610185610257366004610cf3565b610a42565b61026f61026a366004610cf3565b610ae6565b6040516101169190610d84565b61010261028a366004610cf3565b610b66565b6101d061029d366004610cf3565b610b93565b60006102ad83610bcf565b6001600160a01b0383166000908152602081905260409020600301548083106102f957604051636ceb340b60e01b81526001600160a01b03851660048201526024015b60405180910390fd5b6001600160a01b038416600090815260208190526040902060030180548490811061032657610326610dd1565b6000918252602090912001546001600160a01b0316949350505050565b61034c83610c08565b60405163c4e8fcb560e01b81526001600160a01b038381166004830152821515602483015284169063c4e8fcb590604401600060405180830381600087803b15801561039757600080fd5b505af11580156103ab573d6000803e3d6000fd5b505050506001600160a01b038381166000908152602081815260408083209386168352600484019091529020548015158380156103e6575080155b15610436576003830180546001810182556000828152602080822090920180546001600160a01b0319166001600160a01b038a16908117909155925492815260048601909152604090205561054b565b831580156104415750805b1561054b576000610453600184610de7565b600385015490915060009061046a90600190610de7565b90508181146104f857600085600301828154811061048a5761048a610dd1565b6000918252602090912001546003870180546001600160a01b0390921692508291859081106104bb576104bb610dd1565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815260048701909152604090208490555b8460030180548061050b5761050b610e0c565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0389168252600487019052604081205550505b505050505050565b600061055e82610bcf565b506001600160a01b039081166000908152602081905260409020600101541690565b600061058b83610bcf565b506001600160a01b0391821660009081526020818152604080832093909416825260049092019091522054151590565b60006105c682610bcf565b506001600160a01b031660009081526020819052604090206003015490565b6105ee81610bcf565b6001600160a01b03818116600090815260208190526040902060020154163314610636576040516388c3a11560e01b81526001600160a01b03821660048201526024016102f0565b6040516000907f11a3cf439fb225bfe74225716b6774765670ec1060e3796802e62139d69974da908290a26001600160a01b038082166000818152602081905260408082206002810180546001600160a01b031916905560010154905133949190911692917fc8894f26f396ce8c004245c8b7cd1b92103a6e4302fcbab883987149ac01b7ec91a46001600160a01b0316600090815260208190526040902060010180546001600160a01b03191633179055565b6106f382610c08565b6001600160a01b0381166107255760405163a388d26360e01b81526001600160a01b03831660048201526024016102f0565b6001600160a01b03808316600090815260208190526040902060020154811690821603610778576040516365e0406560e11b81526001600160a01b038084166004830152821660248201526044016102f0565b6040516001600160a01b038216907f11a3cf439fb225bfe74225716b6774765670ec1060e3796802e62139d69974da90600090a26001600160a01b03918216600090815260208190526040902060020180546001600160a01b03191691909216179055565b60008060ff60f81b30847f000000000000000000000000000000000000000000000000000000000000000060405160200161081b9493929190610e22565b60408051601f198184030181529190528051602090910120936001600160a01b0385163f7f0000000000000000000000000000000000000000000000000000000000000000149350915050565b60006001600160a01b0382166108915760405163267eaa8160e21b815260040160405180910390fd5b606083901c33146108b5576040516332db94d160e21b815260040160405180910390fd5b6040516108f4906001600160f81b031990309086907f000000000000000000000000000000000000000000000000000000000000000090602001610e22565b6040516020818303038152906040528051906020012060001c90507f0000000000000000000000000000000000000000000000000000000000000000816001600160a01b03163f0361096457604051633194665960e11b81526001600160a01b03821660048201526024016102f0565b8260405161097190610c59565b8190604051809103906000f5905080158015610991573d6000803e3d6000fd5b50506001600160a01b03818116600081815260208181526040918290206001810180546001600160a01b031916958816959095179094559286905580519182529181018590527f4397af6128d529b8ae0442f99db1296d5136062597a15bbc61c1b2a6431a7d15910160405180910390a16040516001600160a01b03808416916000918416907fc8894f26f396ce8c004245c8b7cd1b92103a6e4302fcbab883987149ac01b7ec908390a492915050565b610a4b81610c08565b6001600160a01b0381811660009081526020819052604090206002015416610a91576040516335809b0b60e11b81526001600160a01b03821660048201526024016102f0565b6040516000907f11a3cf439fb225bfe74225716b6774765670ec1060e3796802e62139d69974da908290a26001600160a01b0316600090815260208190526040902060020180546001600160a01b0319169055565b6060610af182610bcf565b6001600160a01b0382166000908152602081815260409182902060030180548351818402810184019094528084529091830182828015610b5a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b3c575b50505050509050919050565b6000610b7182610bcf565b506001600160a01b039081166000908152602081905260409020600201541690565b6001600160a01b03811660009081526020819052604090205480610bca576040516304ca820960e41b815260040160405180910390fd5b919050565b6001600160a01b038116600090815260208190526040902054610c05576040516304ca820960e41b815260040160405180910390fd5b50565b610c1181610bcf565b6001600160a01b03818116600090815260208190526040902060010154163314610c055760405163d4ed9a1760e01b81526001600160a01b03821660048201526024016102f0565b610b1180610e5c83390190565b80356001600160a01b0381168114610bca57600080fd5b60008060408385031215610c9057600080fd5b610c9983610c66565b946020939093013593505050565b600080600060608486031215610cbc57600080fd5b610cc584610c66565b9250610cd360208501610c66565b915060408401358015158114610ce857600080fd5b809150509250925092565b600060208284031215610d0557600080fd5b610d0e82610c66565b9392505050565b60008060408385031215610d2857600080fd5b610d3183610c66565b9150610d3f60208401610c66565b90509250929050565b600060208284031215610d5a57600080fd5b5035919050565b60008060408385031215610d7457600080fd5b82359150610d3f60208401610c66565b6020808252825182820181905260009190848201906040850190845b81811015610dc55783516001600160a01b031683529284019291840191600101610da0565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b600082821015610e0757634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603160045260246000fd5b6001600160f81b031994909416845260609290921b6bffffffffffffffffffffffff19166001840152601583015260358201526055019056fe60a060405234801561001057600080fd5b5033608052608051610ae1610030600039600061021b0152610ae16000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634ce34aa214610051578063899e104c146100815780638df25d9214610094578063c4e8fcb5146100a7575b600080fd5b61006461005f3660046108bb565b6100bc565b6040516001600160e01b0319909116815260200160405180910390f35b61006461008f366004610942565b61013d565b6100646100a23660046109ae565b6101c5565b6100ba6100b5366004610a00565b610210565b005b3360009081526020819052604081205460ff166100f3576040516349ed56f960e11b81523360048201526024015b60405180910390fd5b8160005b8181101561012c573685858381811061011257610112610a3c565b905060c0020190506101238161030a565b506001016100f7565b50632671a55160e11b949350505050565b3360009081526020819052604081205460ff1661016f576040516349ed56f960e11b81523360048201526024016100ea565b8360005b818110156101a8573687878381811061018e5761018e610a3c565b905060c00201905061019f8161030a565b50600101610173565b506101b38484610476565b50632267841360e21b95945050505050565b3360009081526020819052604081205460ff166101f7576040516349ed56f960e11b81523360048201526024016100ea565b6102018383610476565b506346f92ec960e11b92915050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610259576040516336abb4df60e11b815260040160405180910390fd5b6001600160a01b03821660009081526020819052604090205481151560ff9091161515036102ad576040516349271a0f60e11b81526001600160a01b038316600482015281151560248201526044016100ea565b6001600160a01b03821660008181526020818152604091829020805460ff191685151590811790915591519182527fae63067d43ac07563b7eb8db6595635fc77f1578a2a5ea06ba91b63e2afa37e2910160405180910390a25050565b60016103196020830183610a68565b600381111561032a5761032a610a52565b0361036f5761036c6103426040830160208401610a90565b6103526060840160408501610a90565b6103626080850160608601610a90565b8460a001356105bb565b50565b600261037e6020830183610a68565b600381111561038f5761038f610a52565b036103f6578060a001356001146103b95760405163efcc00b160e01b815260040160405180910390fd5b61036c6103cc6040830160208401610a90565b6103dc6060840160408501610a90565b6103ec6080850160608601610a90565b84608001356106c4565b60036104056020830183610a68565b600381111561041657610416610a52565b0361045d5761036c61042e6040830160208401610a90565b61043e6060840160408501610a90565b61044e6080850160608601610a90565b84608001358560a00135610788565b604051631e4cbc7f60e21b815260040160405180910390fd5b808280631759616b60e11b60205260005b838110156105ae578235820160208401935060806020820160243760a0810135604081026040018060a00160a45260008160c401528060c4018160a0850160c4376020830260c00191508160808501351460a06060860135141682850135841416159250821561050257633ae8821360e21b60005260046000fd5b923592833b61052057632f8aeb3960e11b6000528360045260246000fd5b6000808260206000885af192508261059f573d1561057d576020601f3d0104915060208104826003028184111561056557818403600302610200838002868002030401015b5a60208201101561057a573d6000803e3d6000fd5b50505b6357e222f160e11b6000528360045260c0606452608451602001608452806000fd5b50505050600181019050610487565b5050505060806040525050565b6040516323b872dd60e01b600052836004528260245281604452602060006064600080895af1803d15601f3d116001600051141617163d151581166106b45780873b1515166106b4578061069f578161067e573d15610658576020601f3d010460208404816003028183111561063f57818303600302610200838002858002030401015b5a602082011015610654573d6000803e3d6000fd5b5050505b63f486bc8760e01b60005286600452856024528460445260006064528360845260a46000fd5b639889192360e01b6000528660045285602452846044528360645260846000fd5b632f8aeb3960e11b6000528660045260246000fd5b5050604052505060006060525050565b833b6106df57632f8aeb3960e11b6000528360045260246000fd5b6040516323b872dd60e01b6000528360045282602452816044526000806064600080895af180610779573d15610753576020601f3d010460208304816003028183111561073a57818303600302610200838002858002030401015b5a60208201101561074f573d6000803e3d6000fd5b5050505b63f486bc8760e01b60005285600452846024528360445282606452600160845260a46000fd5b50604052505060006060525050565b843b6107a357632f8aeb3960e11b6000528460045260246000fd5b60405160805160a05160c051637921219560e11b6000528760045286602452856044528460645260a0608452600060a45260008060c46000808d5af180610853573d1561082e576020601f3d010460208604816003028183111561081557818303600302610200838002858002030401015b5a60208201101561082a573d6000803e3d6000fd5b5050505b63f486bc8760e01b600052896004528860245287604452866064528560845260a46000fd5b5060809290925260a05260c05260405250506000606052505050565b60008083601f84011261088157600080fd5b50813567ffffffffffffffff81111561089957600080fd5b60208301915083602060c0830285010111156108b457600080fd5b9250929050565b600080602083850312156108ce57600080fd5b823567ffffffffffffffff8111156108e557600080fd5b6108f18582860161086f565b90969095509350505050565b60008083601f84011261090f57600080fd5b50813567ffffffffffffffff81111561092757600080fd5b6020830191508360208260051b85010111156108b457600080fd5b6000806000806040858703121561095857600080fd5b843567ffffffffffffffff8082111561097057600080fd5b61097c8883890161086f565b9096509450602087013591508082111561099557600080fd5b506109a2878288016108fd565b95989497509550505050565b600080602083850312156109c157600080fd5b823567ffffffffffffffff8111156109d857600080fd5b6108f1858286016108fd565b80356001600160a01b03811681146109fb57600080fd5b919050565b60008060408385031215610a1357600080fd5b610a1c836109e4565b915060208301358015158114610a3157600080fd5b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b600060208284031215610a7a57600080fd5b813560048110610a8957600080fd5b9392505050565b600060208284031215610aa257600080fd5b610a89826109e456fea264697066735822122049a979b47e77b7cc159d9cdf43c1f605d2a666bac5eef7ee33283931f1df261564736f6c634300080d0033a264697066735822122009045a1dd31fed5027ad9e432bb8d4a00589e23295be7a1bf6ab5bfb3efaf81e64736f6c634300080d003360a060405234801561001057600080fd5b5033608052608051610ae1610030600039600061021b0152610ae16000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634ce34aa214610051578063899e104c146100815780638df25d9214610094578063c4e8fcb5146100a7575b600080fd5b61006461005f3660046108bb565b6100bc565b6040516001600160e01b0319909116815260200160405180910390f35b61006461008f366004610942565b61013d565b6100646100a23660046109ae565b6101c5565b6100ba6100b5366004610a00565b610210565b005b3360009081526020819052604081205460ff166100f3576040516349ed56f960e11b81523360048201526024015b60405180910390fd5b8160005b8181101561012c573685858381811061011257610112610a3c565b905060c0020190506101238161030a565b506001016100f7565b50632671a55160e11b949350505050565b3360009081526020819052604081205460ff1661016f576040516349ed56f960e11b81523360048201526024016100ea565b8360005b818110156101a8573687878381811061018e5761018e610a3c565b905060c00201905061019f8161030a565b50600101610173565b506101b38484610476565b50632267841360e21b95945050505050565b3360009081526020819052604081205460ff166101f7576040516349ed56f960e11b81523360048201526024016100ea565b6102018383610476565b506346f92ec960e11b92915050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610259576040516336abb4df60e11b815260040160405180910390fd5b6001600160a01b03821660009081526020819052604090205481151560ff9091161515036102ad576040516349271a0f60e11b81526001600160a01b038316600482015281151560248201526044016100ea565b6001600160a01b03821660008181526020818152604091829020805460ff191685151590811790915591519182527fae63067d43ac07563b7eb8db6595635fc77f1578a2a5ea06ba91b63e2afa37e2910160405180910390a25050565b60016103196020830183610a68565b600381111561032a5761032a610a52565b0361036f5761036c6103426040830160208401610a90565b6103526060840160408501610a90565b6103626080850160608601610a90565b8460a001356105bb565b50565b600261037e6020830183610a68565b600381111561038f5761038f610a52565b036103f6578060a001356001146103b95760405163efcc00b160e01b815260040160405180910390fd5b61036c6103cc6040830160208401610a90565b6103dc6060840160408501610a90565b6103ec6080850160608601610a90565b84608001356106c4565b60036104056020830183610a68565b600381111561041657610416610a52565b0361045d5761036c61042e6040830160208401610a90565b61043e6060840160408501610a90565b61044e6080850160608601610a90565b84608001358560a00135610788565b604051631e4cbc7f60e21b815260040160405180910390fd5b808280631759616b60e11b60205260005b838110156105ae578235820160208401935060806020820160243760a0810135604081026040018060a00160a45260008160c401528060c4018160a0850160c4376020830260c00191508160808501351460a06060860135141682850135841416159250821561050257633ae8821360e21b60005260046000fd5b923592833b61052057632f8aeb3960e11b6000528360045260246000fd5b6000808260206000885af192508261059f573d1561057d576020601f3d0104915060208104826003028184111561056557818403600302610200838002868002030401015b5a60208201101561057a573d6000803e3d6000fd5b50505b6357e222f160e11b6000528360045260c0606452608451602001608452806000fd5b50505050600181019050610487565b5050505060806040525050565b6040516323b872dd60e01b600052836004528260245281604452602060006064600080895af1803d15601f3d116001600051141617163d151581166106b45780873b1515166106b4578061069f578161067e573d15610658576020601f3d010460208404816003028183111561063f57818303600302610200838002858002030401015b5a602082011015610654573d6000803e3d6000fd5b5050505b63f486bc8760e01b60005286600452856024528460445260006064528360845260a46000fd5b639889192360e01b6000528660045285602452846044528360645260846000fd5b632f8aeb3960e11b6000528660045260246000fd5b5050604052505060006060525050565b833b6106df57632f8aeb3960e11b6000528360045260246000fd5b6040516323b872dd60e01b6000528360045282602452816044526000806064600080895af180610779573d15610753576020601f3d010460208304816003028183111561073a57818303600302610200838002858002030401015b5a60208201101561074f573d6000803e3d6000fd5b5050505b63f486bc8760e01b60005285600452846024528360445282606452600160845260a46000fd5b50604052505060006060525050565b843b6107a357632f8aeb3960e11b6000528460045260246000fd5b60405160805160a05160c051637921219560e11b6000528760045286602452856044528460645260a0608452600060a45260008060c46000808d5af180610853573d1561082e576020601f3d010460208604816003028183111561081557818303600302610200838002858002030401015b5a60208201101561082a573d6000803e3d6000fd5b5050505b63f486bc8760e01b600052896004528860245287604452866064528560845260a46000fd5b5060809290925260a05260c05260405250506000606052505050565b60008083601f84011261088157600080fd5b50813567ffffffffffffffff81111561089957600080fd5b60208301915083602060c0830285010111156108b457600080fd5b9250929050565b600080602083850312156108ce57600080fd5b823567ffffffffffffffff8111156108e557600080fd5b6108f18582860161086f565b90969095509350505050565b60008083601f84011261090f57600080fd5b50813567ffffffffffffffff81111561092757600080fd5b6020830191508360208260051b85010111156108b457600080fd5b6000806000806040858703121561095857600080fd5b843567ffffffffffffffff8082111561097057600080fd5b61097c8883890161086f565b9096509450602087013591508082111561099557600080fd5b506109a2878288016108fd565b95989497509550505050565b600080602083850312156109c157600080fd5b823567ffffffffffffffff8111156109d857600080fd5b6108f1858286016108fd565b80356001600160a01b03811681146109fb57600080fd5b919050565b60008060408385031215610a1357600080fd5b610a1c836109e4565b915060208301358015158114610a3157600080fd5b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b600060208284031215610a7a57600080fd5b813560048110610a8957600080fd5b9392505050565b600060208284031215610aa257600080fd5b610a89826109e456fea264697066735822122049a979b47e77b7cc159d9cdf43c1f605d2a666bac5eef7ee33283931f1df261564736f6c634300080d0033";

type ConduitControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConduitControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConduitController__factory extends ContractFactory {
  constructor(...args: ConduitControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ConduitController";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConduitController> {
    return super.deploy(overrides || {}) as Promise<ConduitController>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ConduitController {
    return super.attach(address) as ConduitController;
  }
  connect(signer: Signer): ConduitController__factory {
    return super.connect(signer) as ConduitController__factory;
  }
  static readonly contractName: "ConduitController";
  public readonly contractName: "ConduitController";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConduitControllerInterface {
    return new utils.Interface(_abi) as ConduitControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConduitController {
    return new Contract(address, _abi, signerOrProvider) as ConduitController;
  }
}
